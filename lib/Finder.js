// Generated by CoffeeScript 1.6.3
(function() {
  var Finder, fs, moment, _path;

  fs = require('fs');

  _path = require('path');

  moment = require('moment');

  Finder = (function() {
    Finder.ASTERISK_PATTERN = '[0-9a-zA-Z/.-_ ]+';

    Finder.TIME_FORMAT = 'YYYY-MM-DD HH:mm';

    Finder.prototype.directory = null;

    Finder.prototype.recursive = false;

    Finder.prototype.excludes = [];

    Finder.prototype.filters = [];

    function Finder(directory) {
      directory = _path.resolve(directory);
      this.directory = directory;
    }

    Finder.prototype.recursively = function(recursive) {
      this.recursive = recursive != null ? recursive : true;
      return this;
    };

    Finder.prototype.exclude = function(excludes) {
      var exclude, result, _i, _len;
      if (typeof excludes === 'string') {
        excludes = [excludes];
      }
      result = [];
      for (_i = 0, _len = excludes.length; _i < _len; _i++) {
        exclude = excludes[_i];
        result.push(exclude.replace(/\*/g, Finder.ASTERISK_PATTERN));
      }
      this.excludes = result;
      return this;
    };

    Finder.prototype.size = function(operation, value) {
      this.filter(function(stat) {
        return Finder.compare(stat.size, operation, value);
      });
      return this;
    };

    Finder.prototype.date = function(operation, value) {
      this.filter(function(stat) {
        var date;
        switch (Object.prototype.toString.call(value)) {
          case '[object String]':
            date = moment(value, Finder.TIME_FORMAT);
            break;
          case '[object Object]':
            date = moment().subtract(value);
            break;
          default:
            throw new Error('Date format is not valid.');
        }
        return Finder.compare((new Date(stat.mtime)).getTime(), operation, date.valueOf());
      });
      return this;
    };

    Finder.prototype.filter = function(fn) {
      this.filters.push(fn);
      return this;
    };

    Finder.prototype.getPaths = function(dir, type, mask) {
      var exclude, filter, ok, path, paths, stat, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (type == null) {
        type = 'all';
      }
      if (mask == null) {
        mask = null;
      }
      if (mask !== null) {
        mask = mask.replace(/\*/g, Finder.ASTERISK_PATTERN);
      }
      paths = [];
      _ref = fs.readdirSync(dir);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        path = dir + '/' + path;
        ok = true;
        _ref1 = this.excludes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          exclude = _ref1[_j];
          if ((new RegExp(exclude)).test(path)) {
            ok = false;
            break;
          }
        }
        if (ok === false) {
          continue;
        }
        stat = fs.statSync(path);
        if (type === 'all' || (type === 'files' && stat.isFile()) || (type === 'directories' && stat.isDirectory())) {
          if (mask === null || (mask !== null && (new RegExp(mask, 'g')).test(path))) {
            ok = true;
            _ref2 = this.filters;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              filter = _ref2[_k];
              if (!filter(stat, path)) {
                ok = false;
                break;
              }
            }
            if (ok === false) {
              continue;
            }
            paths.push(path);
          }
        }
        if (stat.isDirectory() && this.recursive === true) {
          paths = paths.concat(this.getPaths(path, type, mask));
        }
      }
      return paths;
    };

    Finder.prototype.find = function(mask, type) {
      if (mask == null) {
        mask = null;
      }
      if (type == null) {
        type = 'all';
      }
      return this.getPaths(this.directory, type, mask);
    };

    Finder.prototype.findFiles = function(mask) {
      if (mask == null) {
        mask = null;
      }
      return this.find(mask, 'files');
    };

    Finder.prototype.findDirectories = function(mask) {
      if (mask == null) {
        mask = null;
      }
      return this.find(mask, 'directories');
    };

    Finder.find = function(path, type) {
      if (type == null) {
        type = 'all';
      }
      path = this.parseDirectory(path);
      return (new Finder(path.directory)).recursively().find(path.mask, type);
    };

    Finder.findFiles = function(path) {
      return Finder.find(path, 'files');
    };

    Finder.findDirectories = function(path) {
      return Finder.find(path, 'directories');
    };

    Finder.parseDirectory = function(path) {
      var asterisk, mask, regexp, splitter;
      mask = null;
      asterisk = path.indexOf('*');
      regexp = path.indexOf('<');
      if (asterisk !== -1 || regexp !== -1) {
        if (asterisk === -1 || (asterisk !== -1 && regexp !== -1 && asterisk > regexp)) {
          splitter = regexp;
        } else if (regexp === -1 || (regexp !== -1 && asterisk !== -1 && asterisk <= regexp)) {
          splitter = asterisk;
        }
        mask = path.substr(splitter);
        path = path.substr(0, splitter);
        mask = mask.replace(/<|>/g, '');
        path = path.replace(/<|>/g, '');
      }
      return {
        directory: path,
        mask: mask
      };
    };

    Finder.compare = function(l, operator, r) {
      switch (operator) {
        case '>':
          return l > r;
        case '>=':
          return l >= r;
        case '<':
          return l < r;
        case '<=':
          return l <= r;
        case '=':
        case '==':
          return l === r;
        case '!':
        case '!=':
        case '<>':
          return l !== r;
        default:
          throw new Error('Unknown operator ' + operator + '.');
      }
    };

    return Finder;

  })();

  module.exports = Finder;

}).call(this);
